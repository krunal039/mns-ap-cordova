(function () {
    'use strict';

    // create the app
    var app = angular.module('MnS.ActivityPlanner', [
 // ootb angular modules
    'ngRoute',          // app route (url path) support
    'ngCookies',        // cookie read/write support
    'ngAnimate',        // animation capabilities
   'ngSanitize',        // animation capabilities
   'angular-data.DSCacheFactory', //angular caching
    // my custom modules 
    'common'
    ]);

    // startup code
    app.run([
        '$route', 'angular.config', 'DSCacheFactory', function ($route, angularConfig, dsCacheFactory) {
            dsCacheFactory("activityAppConfigCache", { storageMode: "localStorage", maxAge: 2400000, deleteOnExpire: "aggressive" });
            dsCacheFactory("activityDataCache", { storageMode: "localStorage", maxAge: 720000, deleteOnExpire: "aggressive" });
            dsCacheFactory("activityBADataCache", { storageMode: "localStorage", maxAge: 720000, deleteOnExpire: "aggressive" });
            dsCacheFactory("activityOnGoingDataCache", { storageMode: "localStorage", maxAge: 720000, deleteOnExpire: "aggressive" });
            dsCacheFactory("activityLastYearDataCache", { storageMode: "localStorage", maxAge: 3600000 * 24, deleteOnExpire: "aggressive" });
        }
    ]);

    //enble html5 route mode to remove digest issue in ie 9
    app.config(function ($locationProvider) {
        $locationProvider.html5Mode(false);
    });

})();
(function () {
    'use strict';

    var app = angular.module('MnS.ActivityPlanner');

    var events = {
        controllerActivateSuccess: 'controller.activateSuccess',
        // event when to toggle the working on it dialog
        workingOnItToggle: 'workingonit.toggle'
    };

    var config = {
        title: 'M&S Activity Planner',
        // config the exceptionHandler decorator
        appErrorPrefix: '[SYSERR] ',
        // app events
        events: events,
        // app version
        version: '1.0.0.0',
        // debug notification settings
        showDebugNotiSetting: false,

        isCurrentUserActivityMember : false
    };

    // create a global variable on app called 'config'
    app.value('config', config);

    // configure the angular logging service before startup
    app.config(['$logProvider', function ($logProvider) {
        // turn debugging off/on (no info or warn)
        if ($logProvider.debugEnabled) {
            $logProvider.debugEnabled(true);
        }
    }]);

    // configure the common configuration
    app.config(['commonConfigProvider', function (cfg) {
        cfg.config.controllerActivateSuccessEvent = config.events.controllerActivateSuccess;
        cfg.config.workingOnItToggleEvent = config.events.workingOnItToggle;
    }]);
})();
(function () {
    'use strict';

    // define service
    var serviceId = 'angular.config';
    angular.module('MnS.ActivityPlanner').factory(serviceId,
      ['$http', 'common', configAngular]);

    function configAngular($http, common) {
        // init factory
        init();

        // service public signature
        return {};

        // init factory
        function init() {
            // set common $http headers
            $http.defaults.headers.common.Accept = 'application/json;odata=verbose;';

            common.logger.log("service loaded", null, serviceId);
        }
    }

})();
(function () {
    'use strict';

    var app = angular.module('MnS.ActivityPlanner');

    app.config(function ($provide) {
        $provide.decorator('$exceptionHandler',
                            ['$delegate', 'config', 'logger', extendExceptionHandler]);
    });

    // Extend $exceptionHandler service to display error notification
    function extendExceptionHandler($delegate, config, logger) {
        var appErrorPrefix = config.appErrorPrefix;

        return function (exception, cause) {
            $delegate(exception, cause);
            if (appErrorPrefix && exception.message.indexOf(appErrorPrefix) === 0) { return; }

            var errorData = {
                exception: exception,
                cause: cause
            };

            var msg = appErrorPrefix + exception.message;

            logger.logError(msg, errorData, true);
        };
    }
})();
(function () {
    'use strict';

    var app = angular.module('MnS.ActivityPlanner');

    // get all the routes
    app.constant('routes', getRoutes());

    // config routes & their resolvers
    app.config(['$routeProvider', 'routes', routeConfigurator]);

    function routeConfigurator($routeProvider, routes) {
        routes.forEach(function (route) {
            $routeProvider.when(route.url, route.config);
        });

        $routeProvider.otherwise({ redirectTo: '/login' });
    }

    // build the routes
    function getRoutes() {
        return [
            {
                url: '/login',
                config: {
                    templateUrl: 'app/controller/activity-login/login.html',
                    title: 'Login',
                    settings: {
                        nav: 1,
                        content: 'Login',
                        quickLaunchEnabled: false,
                        showFilter: false
                    }
                }
            },
          {
              url: '/new',
              config: {
                  templateUrl: 'app/controller/activity-new/new.html',
                  title: 'New',
                  settings: {
                      nav: 1,
                      content: 'New',
                      quickLaunchEnabled: true,
                      showFilter : true
                  }
              }
          },
          {
              url: '/on-going',
              config: {
                  templateUrl: 'app/controller/activity-on-going/ongoing.html',
                  title: 'On Going',
                  settings: {
                      nav: 2,
                      content: 'On Going',
                      quickLaunchEnabled: true,
                      showFilter: true
                  }
              }
          },
          {
              url: '/last-year',
              config: {
                  templateUrl: 'app/controller/activity-last-year/lastyear.html',
                  title: 'Last Year',
                  settings: {
                      nav: 3,
                      content: 'Last Year',
                      quickLaunchEnabled: true,
                      showFilter: true
                  }
              }
          }
        ];
    }
})();
(function () {
    'use strict';

    var commonModule = angular.module('common', []);

    commonModule.provider('commonConfig', function () {
        this.config = {
            // see papa's course
        };

        this.$get = function () {
            return {
                config: this.config
            };
        };
    });

    commonModule.factory('common',
      ['$q', '$rootScope', '$timeout', 'commonConfig', 'logger', common]);

    function common($q, $rootScope, $timeout, commonConfig, logger){
        var service = {
            // passthough common angular dependencies
            $broadcast: $broadcast,
            $q: $q,
            $timeout: $timeout,
            // my services
            logger: logger,
            activateController: activateController
        };

        return service;

        function $broadcast() {
            return $rootScope.$broadcast.apply($rootScope, arguments);
        }

        function activateController(promises, controllerId) {
            return $q.all(promises).then(function (eventArgs) {
                var data = { controllerId: controllerId };
                $broadcast(commonConfig.config.controllerActivateSuccessfulEvent, data);
            });
        }
    }
})();
(function () {
    'use strict';

    // define factory
    angular.module('common').factory('logger',
      ['$log', 'config', logger]);

    // create factory
    function logger($log, config) {
        var service = {
            log: log,
            logError: logError,
            logSuccess: logSuccess,
            logWarning: logWarning
        };

        return service;

        // #region public members
        function log(message, data, source, showNotification) {
            writeLog(message, data, source, showNotification, "info");
        }

        function logError(message, data, source, showNotification) {
            writeLog(message, data, source, showNotification, "error");
        }

        function logSuccess(message, data, source, showNotification) {
            writeLog(message, data, source, showNotification, "success");
        }

        function logWarning(message, data, source, showNotification) {
            writeLog(message, data, source, showNotification, "warning");
        }
        // #endregion

        // #region private members
        // universal method for writing notifications
        function writeLog(message, data, source, showNotification, notificationType) {
            var iconUrl, notiTitle;
            showNotification = showNotification || true;

            // write to angular log, & specify error if it is an error
            var write = (notificationType === 'error') ? $log.error : $log.log;
            source = source ? '[' + source + '] ' : '';
            write(source, " ["+ moment().format('MMMM Do YYYY, h:mm:ss a') + "] ", message, data);

            //if (showNotification) {
            //    if (notificationType === 'info') {
            //        // if informational messages not specified to be shown, stop
            //        if (!config.showDebugNotiSetting) {
            //            return;
            //        } else {
            //            iconUrl = "images/info.png";
            //            notiTitle = "MnS Activity Planner: DEBUG LOG";
            //        }
            //    } else if (notificationType === 'error') {
            //        iconUrl = "images/error.png";
            //        notiTitle = "MnS Activity Planner: ERROR";
            //    } else if (notificationType === 'warning') {
            //        iconUrl = "images/warning.png";
            //        notiTitle = "MnS Activity Planner: WARNING";
            //    } else if (notificationType === 'success') {
            //        iconUrl = "images/success.png";
            //        notiTitle = "MnS Activity Planner";
            //    }

            //    // create sharepoint notification
            //    var notificationData = new SPStatusNotificationData("", STSHtmlEncode(message), iconUrl, null);
            //    var notification = new SPNotification(SPNotifications.ContainerID.Status, STSHtmlEncode(notiTitle), false, null, null, notificationData);

            //    // show sharepoint notification tile
            //    notification.Show(false);
            //}
        }
        // #endregion

    }
})();
(function () {
    'use strict';

    // define controller
    var controllerId = 'apfilter';
    angular.module('MnS.ActivityPlanner').controller(controllerId,
      ['$scope','$window', '$location',  'common', 'config', 'spContext', 'datacontext', filterController]);

    // init controller
    function filterController($scope,$window, $location, common, config, spContext, datacontext) {
        var vm = this;
        vm.openPanel = false;
        vm.FilterValues = getFilersTypeChoices();

        vm.tradingFilter = tradingFilter;

        vm.shoHideFilters = showHideFilters;

        vm.filterData = applyFilter;

        function applyFilter() {
            vm.openPanel = !vm.openPanel;
            $('#filterModel').modal("hide");
            
            /*
            //Business Unit Filters Commented as requirement changed not to display it

            var buFilters = "";
            var selectedFilterElements = $("label.btn.btn-info.ap-item-filter0.ng-scope.active");
            if (selectedFilterElements && selectedFilterElements.length > 0) {
                buFilters = "@";
                var selectedBa = $("label.btn.btn-info.ap-item-filter0.ng-scope.active");
                selectedBa.each(function (index, item) {
                    buFilters += $(item).attr("data-ap-ba").split('##')[1] + (index < selectedBa.length - 1 ? "," : "@");
                });
            }*/

            var taFilters = "";
            var selectedFilterElements = $("label.btn.btn-info.ap-item-filter0.ng-scope.active");
            if (selectedFilterElements && selectedFilterElements.length > 0) {
                taFilters = "@";
                var selectedBa = $("label.btn.btn-info.ap-item-filter0.ng-scope.active");
                selectedBa.each(function (index, item) {
                    taFilters += $(item).attr("data-ap-ta").split('##')[1] + (index < selectedBa.length - 1 ? "," : "@");
                });
            }

            $location.path($location.path()).search({ 'taFilters': taFilters });
           
           
        }

        function showHideFilters() {
            if (($("#filterModel").data('bs.modal') || {}).isShown === undefined) {
                $('#filterModel').modal({ backdrop: 'static', keyboard: false });
            } else {
                $('#filterModel').modal("toggle");
            }
            
            vm.openPanel = !vm.openPanel;
        };

        function tradingFilter(val) {
            return function(item) {
                var activityTradingArea = (item["ActivityTradingArea"].ActivityTradingArea);
                var activityBusinessArea = (item["ActivityBusinessArea"]);
                if (val === activityTradingArea && val + " All" !== activityBusinessArea) {
                    return true;
                } else {
                    return false;
                }
            }
        };

        function getFilersTypeChoices() {
            datacontext.getFiltersTypeChoices().then(function(data) {
                if (data) {
                    vm.FilterTradingItems = getTradingAreas(data);
                    vm.FilterItems = data;
                   
                } else {
                    throw new Error('no activity data found');
                }
            },
           function(error) {
               throw new Error(error);
           }).catch(function(error) {
               common.logger.logError('error obtaining activity data', error, controllerId);
           });
        };

        function getTradingAreas(items) {
            //var propertyName = "ActivityTradingArea";
            var result = [];
            var tradingAreaId = [];
            $.each(items, function (index, item) {
                var tradingArea = { id: item["ActivityTradingArea"].ID, title: item["ActivityTradingArea"].ActivityTradingArea };
                if ($.inArray(tradingArea.id, tradingAreaId) === -1) {
                    tradingAreaId.push(tradingArea.id);
                    result.push(tradingArea);
                }
            });
            return result;
        };

        init();

        // init controller
        function init() {
            common.logger.log("controller loaded", null, controllerId);
            common.activateController([], controllerId);
        }
       
    }
})();
(function () {
    'use strict';

    // define controller
    var controllerId = 'quicklaunch';
    angular.module('MnS.ActivityPlanner').controller(controllerId,
      ['$rootScope','$route', 'config', 'common', 'routes', quickLaunch]);

    // init controller
    function quickLaunch($rootScope, $route, config, common, routes) {

        $rootScope.$on("$routeChangeSuccess", function (e, current) {
                var showFilters = routes.filter(function (route) {
                    return route.config.settings && route.config.settings.nav && route.templateUrl === current.$$route.templateUrl && route.config.settings.showFilter;
                });
                if (showFilters) {
                    $rootScope.query = $.param(current.params);
                }
            });
      
        var vm = this;
        // utility method to see if the provided route is the current route
        vm.isCurrent = isCurrent;

        // utility method to see if the provided route is the current route
        function isCurrent(route) {
            if (!route.config.title || !$route.current || !$route.current.title) {
                return false;
            }
            var menuName = route.config.title;
            return $route.current.title.substr(0, menuName.length) === menuName ? true : false;
        }
        // #endroute

        // #region private members
        // load all navigatino routes
        function getNavigationRoutes() {
            // only retrieve routes flagged quickLaunchEnabled = true & sort them
            vm.navRoutes = routes.filter(function (route) {
                return route.config.settings && route.config.settings.nav && route.config.settings.quickLaunchEnabled;
            }).sort(function (routeA, routeB) {
                return routeA.config.settings.nav > routeB.config.settings.nav;
            });
        }

        // init controller
        function init() {
            common.logger.log("controller loaded", null, controllerId);
            getNavigationRoutes();
        }

        // init controller
        init();
       
    }
})();
(function () {
    'use strict';

    // define controller
    var controllerId = 'shell';
    angular.module('MnS.ActivityPlanner').controller(controllerId,
      ['$rootScope', '$route', 'common', 'config', shell]);

    // create controller
    function shell($rootScope, $route, common, config) {
        var vm = this;
        var logger = common.logger;

        // init controller
        init();

        // init controller
        function init() {
            logger.log("app shell loaded", null, controllerId);
            common.activateController([], controllerId)
            .then(function () {
                common.$broadcast(config.events.workingOnItToggle, { show: false });
            });
        }

        // wire handler to successful route changes to
        //  - update the page title (for bookmarking)
        $rootScope.$on('$routeChangeSuccess',
          function (event, next, current) {
              if (!$route.current || !$route.current.title) {
                  $rootScope.pageTitle = '';
              } else if ($route.current.settings.nav > 0) {
                  $rootScope.pageTitle = ' > ' + $route.current.settings.content;
              } else {
                  $rootScope.pageTitle = '';
              }

          });
    }

})();
(function () {
    'use strict';

    // define controller
    var controllerId = 'workingonit';
    angular.module('MnS.ActivityPlanner').controller(controllerId,
      ['$rootScope','$route', '$timeout', 'common', 'config', workingonit]);

    function workingonit($rootScope, $route, $timeout, common, config) {
        var vm = this;
        vm.isWorking = true;
        $rootScope.isWorking = vm.isWorking;
        init();

        function init() {
            common.logger.log("controller loaded", null, controllerId);
            common.activateController([], controllerId);
        }

        // wire handler to listen for toggling the working animation
        //    call it like this:
        //common.$broadcast(commonConfig.config.workingOnItToggleEvent, {show: false});
        $rootScope.$on(config.events.workingOnItToggle, function (event, data) {
            //common.logger.log('toggle working on it', data, controllerId);
            vm.isWorking = data.show;
        });

        // wire handler when route is changing to show
        //  working animation
        $rootScope.$on('$routeChangeStart',
          function (event, next, current) {
              common.logger.log('$routeChangeStart', event, controllerId);
              vm.isWorking = true;
          });

        // wire handler when route is finished changing to hide
        $rootScope.$on('$routeChangeSuccess', function (event, next, current) {
            common.logger.log('$routeChangeSuccess', current, controllerId);
            // add short timeout to see the working dialog, otherwise it's too fast
            $timeout(function () {
                vm.isWorking = false;
            }, 0);
        });

    }
})();
(function () {
    'use strict';
    var countDownFilter = 'countDownFilter';
    angular.module('MnS.ActivityPlanner').filter(countDownFilter, function () {
        return function (input) {
            var activityStartDate = input.ActivityStartDate;
            var activityEndDate = input.ActivityEndDate;

            var resultHtml = "";
            activityEndDate = (Date.parse(activityEndDate));
            activityStartDate = (Date.parse(activityStartDate));

            var today = (new Date());
            var resultEndDate = parseInt((activityEndDate - today) / (24 * 3600 * 1000));
            var resultStartDate = parseInt((activityStartDate - today) / (24 * 3600 * 1000));
            var duration = parseInt((activityEndDate - activityStartDate) / (24 * 3600 * 1000));
            if (resultStartDate > 0) {
                resultHtml = "<span class='ap-item-title-duration ap-item-title-duration-no-started'>NOT STARTED</span>";
            } else if (resultEndDate > 0 ) {
                resultHtml = "<span class='ap-item-title-duration'>Days Left:</span><span class='ap-item-title-d'>&nbsp;&nbsp;" + resultEndDate + "</span>";
            } else if (resultEndDate === 0) {
                resultHtml = "<span class='ap-item-title-duration ap-item-title-duration-lastday'>LAST DAY</span>";
            }
            else if (resultEndDate < 0) {
                resultHtml = "<span class='ap-item-title-duration'>EXPIRED</span>";
            }
            return resultHtml;
        };
    });

    var dateFilter = 'dateFilter';
    angular.module('MnS.ActivityPlanner').filter(dateFilter, function () {
        return function (input, dateFormat, isUpperCase) {
            var result = "";
            var dateformat = "";
            switch (dateFormat) {
                case 1:
                    dateFormat = "dd";
                    break;
                case 2:
                    dateFormat = "DD";
                    break;
                case 3:
                    dateFormat = "DD MMMM YYYY";
                    break;
            }
            result = moment(Date.parse(input)).format(dateFormat);
            if (isUpperCase) {
                result = result.toUpperCase();
            }
            return result;
        };
    });

    var tradingAreaSubsection = 'tradingAreaSubsection';
    angular.module('MnS.ActivityPlanner').filter(tradingAreaSubsection, function () {
        return function (input) {
            var result = input;
            if (input && input.indexOf(" ") > -1) {
                result = input.substr(0, input.indexOf(' '));
            }
            return result.toLowerCase();
        };
    });
})();
(function () {
    'use strict';

    // define factory
    var serviceId = 'datacontext';
    angular.module('MnS.ActivityPlanner').factory(serviceId,
      ['$rootScope', '$cookieStore', '$http', '$q', 'config', 'common', 'spContext', 'DSCacheFactory', datacontext]);

    function datacontext($rootScope, $cookieStore, $http, $q, config, common, spContext, dsCacheFactory) {

        self.activityDataCache = dsCacheFactory.get("activityDataCache");
        self.activityLastYearDataCache = dsCacheFactory.get("activityLastYearDataCache");
        self.activityOnGoingDataCache = dsCacheFactory.get("activityOnGoingDataCache");
        self.activityBADataCache = dsCacheFactory.get("activityBADataCache");

        self.activityDataCache.setOptions({
            onExpire: function (key, value) {
                getActivityData()
                    .then(function () {
                        common.logger.log("Activity Cache was automatically refreshed.", {}, serviceId);
                    }, function () {
                        common.logger.log("Error getting data. Putting expired item back in the cache.", {}, serviceId);
                        self.activityDataCache.put(key, value);
                    });
            }
        });

        self.activityBADataCache.setOptions({
            onExpire: function (key, value) {
                getBusinessAreaData()
                    .then(function () {
                        common.logger.log("Business Area Cache was automatically refreshed." , {}, serviceId);
                    }, function () {
                        common.logger.log("Business Area. Putting expired item back in the cache.", {}, serviceId);
                        self.activityBADataCache.put(key, value);
                    });
            }
        });

        self.activityLastYearDataCache.setOptions({
            onExpire: function (key, value) {
                getActivityLastYearData()
                    .then(function () {
                        common.logger.log("Last Year Activity Area Cache was automatically refreshed.", {}, serviceId);
                    }, function () {
                        common.logger.log("Last Year. Putting expired item back in the cache.", {}, serviceId);
                        self.activityBADataCache.put(key, value);
                    });
            }
        });

        self.activityOnGoingDataCache.setOptions({
            onExpire: function (key, value) {
                getActivityOnGoingData()
                    .then(function () {
                        common.logger.log("On Going Activity Area Cache was automatically refreshed.", {}, serviceId);
                    }, function () {
                        common.logger.log("On Going Activity. Putting expired item back in the cache.", {}, serviceId);
                        self.activityBADataCache.put(key, value);
                    });
            }
        });

        function getBusinessAreaData() {
            var deferred = $q.defer(),
               cacheKey = "businessArea",
               businessAreaData = self.activityBADataCache.get(cacheKey);

            if (businessAreaData) {
                common.logger.log("Found Business Area data inside cache", businessAreaData, serviceId);
                deferred.resolve(businessAreaData);
            } else {
                var request = buildFiltersTypeChoicesResources();
                loadDataVia$http(request).then(function (data) {
                    if (data) {
                        self.activityBADataCache.put(cacheKey, data);
                        common.logger.log("retrieved business are items", data, serviceId);
                        deferred.resolve(data);
                    }
                }, function (error) {
                    deferred.reject(error);
                    common.logger.error("error while retriving business area data", error, serviceId);
                });
            }
            return deferred.promise;
        };

        function getActivityData() {

            var deferred = $q.defer(),
            cacheKey = "activityData",
            activityData = self.activityDataCache.get(cacheKey);

            if (activityData) {
                common.logger.log("Found Activity data inside cache ", activityData, serviceId);
                deferred.resolve(activityData);
            } else {
                var startOfWeek = getStartOfWeek(new Date());
                var endOfWeek = new Date(startOfWeek);
                var numberOfDaysToAdd = 56;
                endOfWeek.setDate(endOfWeek.getDate() + numberOfDaysToAdd);

                var filter = "ActivityStartDate ge datetime\'" + startOfWeek + "\' and ActivityStartDate le datetime\'" + endOfWeek.toISOString() + "\'";

                var request = buildActivityItemRequestRequest(filter);
                loadDataVia$http(request).then(function (data) {
                    if (data) {
                        common.logger.log("retrieved Activity items", data, serviceId);
                        self.activityDataCache.put(cacheKey, data);
                        deferred.resolve(data);

                    }
                }, function (error) {
                    deferred.reject(error);
                    common.logger.error("error while retriving Activity items", error, serviceId);
                });
            }
            return deferred.promise;
        };

        function getActivityLastYearData() {

            var deferred = $q.defer();

            var cacheKey = "activityLastYearData",
            activityLastYearData = self.activityLastYearDataCache.get(cacheKey);

            if (activityLastYearData) {
                common.logger.log("Found Last Year Activity data inside cache", activityLastYearData, serviceId);
                deferred.resolve(activityLastYearData);
            } else {
                var lastYear = new Date().getFullYear() - 1;
                var startDate = new Date("01/01/" + lastYear).toISOString();
                var endDate = new Date("12/31/" + lastYear).toISOString();
                var filter = "ActivityStartDate ge datetime\'" + startDate + "\' and ActivityEndDate le datetime\'" + endDate + "\'";
                var request = buildActivityItemRequestRequest(filter);

                loadDataVia$http(request).then(function (data) {
                    if (data) {
                        self.activityLastYearDataCache.put(cacheKey, data);
                        common.logger.log("retrieved Last year items", data, serviceId);
                        deferred.resolve(data);

                    }
                }, function (error) {
                    deferred.reject(error);
                    common.logger.error("error while retriving business area data", error, serviceId);
                });
            }
            return deferred.promise;
        };

        function getActivityOnGoingData() {
            var deferred = $q.defer();

            var cacheKey = "activityOnGoingData",
            activityOnGoingDataData = self.activityOnGoingDataCache.get(cacheKey);

            if (activityOnGoingDataData) {
                common.logger.log("Found On Going Activity data inside cache", activityOnGoingDataData, serviceId);
                deferred.resolve(activityOnGoingDataData);
            } else {
                var today = new Date(new Date().setHours(0, 0, 0, 0)).toISOString();
                var filter = "ActivityStartDate le datetime\'" + today + "\' and ActivityEndDate ge datetime\'" + today + "\'";
                var request = buildActivityItemRequestRequest(filter);

                loadDataVia$http(request).then(function (data) {
                    if (data) {
                        self.activityOnGoingDataCache.put(cacheKey, data);
                        common.logger.log("retrieved all ongoing activity Items", data, serviceId);
                        deferred.resolve(data);
                    }
                }, function (error) {
                    deferred.reject(error);
                    common.logger.error("retrieved all ongoing activity Items", error, serviceId);
                });
            }
            return deferred.promise;
        };

        function getStartOfWeek(d) {
            d = new Date(d);
            d.setHours(0, 0, 0, 0);
            var day = d.getDay(),
                diff = d.getDate() - (day + 1);
            return (new Date(d.setDate(diff)).toISOString());

        };

        function createTaFilter(filters) {
            var taFilterValue = [];
            if (filters && filters.taFilters) {
                var filterValues = filters.taFilters.replace(/@/g, "").split(",");
                $.each(filterValues, function (index, value) {
                    var filterValue = value;
                    taFilterValue.push({ 'ActivityTradingAreaId': filterValue });
                });
            }

            return taFilterValue;
        }

        function getActivityBookingsAll(filters) {
            var deferred = $q.defer();
            var taFilterValue = createTaFilter(filters);
            getActivityData().then(
                function (data) {
                    if (data) {
                        var result = filterActivityDataByTa(taFilterValue, data);
                        //common.logger.log("retrieved all activity Items", data, serviceId);
                        deferred.resolve(result);
                    }
                }, function (error) {
                    deferred.reject(error);
                    //common.logger.error("retrieved all activity Items", error, serviceId);
                });

            return deferred.promise;
        };

        function getOngoingActivity(filters) {
            var deferred = $q.defer();
            var taFilterValue = createTaFilter(filters);

            getActivityOnGoingData().then(function (data) {
                if (data) {
                    var result = filterActivityDataByTa(taFilterValue, data);
                    //common.logger.log("retrieved all ongoing activity Items", data, serviceId);
                    deferred.resolve(result);
                }
            }, function (error) {
                deferred.reject(error);
                //common.logger.error("retrieved all ongoing activity Items", error, serviceId);
            });

            return deferred.promise;
        }

        function getLastYearActivity(filters) {
            var deferred = $q.defer();
            var taFilterValue = createTaFilter(filters);

            getActivityLastYearData().then(function (data) {
                if (data) {
                    var result = filterActivityDataByTa(taFilterValue, data);
                    //common.logger.log("retrieved all last year activity Items", data, serviceId);
                    deferred.resolve(result);
                }
            }, function (error) {
                deferred.reject(error);
                //common.logger.error("retrieved all last year activity Items", error, serviceId);
            });

            return deferred.promise;
        }

        function loadDataVia$http(url) {
            var deferred = $q.defer();
            var req = {
                method: 'GET',
                url: url,
                headers: {
                    "Content-Type": "application/json;odata=verbose",
                    "Authorization": "Bearer " + spContext.accessToken
                }
            };

            $http(req).then( function (data) {
                var jsonObject = JSON.parse(data.body);
                if (jsonObject) {
                    var results = jsonObject.d.results;
                    deferred.resolve(results);
                } else {
                    deferred.reject("401");
                }
            },
                function (data, errorCode, errorMessage) {
                deferred.reject(errorMessage);
                });

            return deferred.promise;
        }

        function loadDataViaRequestExecutor(url) {
            var deferred = $q.defer();
            var scriptbase = spContext.hostWeb.url + "/_layouts/15/";
            $.getScript(scriptbase + "SP.RequestExecutor.js", function () {
                var executor = new SP.RequestExecutor(spContext.hostWeb.appWebUrl);
                executor.executeAsync(
                {
                    url: spContext.hostWeb.appWebUrl + url,
                    method: "GET",
                    headers: {
                        "Accept": "application/json; odata=verbose"
                    },
                    success: function (data) {
                        var jsonObject = JSON.parse(data.body);
                        if (jsonObject) {
                            var results = jsonObject.d.results;
                            deferred.resolve(results);
                        } else {
                            deferred.reject("401");
                        }
                    },
                    error: function (data, errorCode, errorMessage) {
                        deferred.reject(errorMessage);
                    }
                }
            );
            });

            return deferred.promise;
        };

        function buildActivityItemRequestRequest(filter) {

            var request = spContext.hostWeb.url + '_api/web/lists/GetByTitle(\'Activity Booking\')/items?' +
                '$select=ID,Attachments,ActivityTitle,ActivityDescription,ActivityStartDate,ActivityEndDate,ActivityShowInHistory,ActivityIsUpdated,ActivityTradingAreaId,ActivityTradingArea/ActivityTradingArea,ActivityBusinessAreaId,ActivityBusinessArea/ActivityBusinessArea,AttachmentFiles,ActivityUpdatedDate,ActivityDuration' +
                '&$orderBy=ActivityStartDate desc' +
                '&$expand=ActivityTradingArea,ActivityBusinessArea,AttachmentFiles,ActivityTradingArea/Id,ActivityBusinessArea/Id' +
                 (filter ? "&$filter=" + filter : "");

            return request;

        };

        function filterActivityDataByTa(filters, activityData) {
            if (filters && filters.length > 0) {
                var lookup = _.indexBy(filters, function(o) { return o.ActivityTradingAreaId.toString() });
                var result = _.filter(activityData, function(u) {
                    return lookup[u.ActivityTradingAreaId.toString()] !== undefined;
                });
                return result;
            } else {
                return activityData;
            }
        };

        function getHostWebUrl() {
            return spContext.hostWeb.url;
        }

        function buildFiltersTypeChoicesResources(filter) {

            var request = spContext.hostWeb.url+ '_api/web/lists/GetByTitle(\'Activity Business Area\')/items?' +
                '$select=ActivityTradingArea/ID, ID, ActivityTradingArea/ActivityTradingArea,ActivityBusinessArea' +
                '&$orderBy=ActivityTradingArea/ActivityTradingArea asc, ActivityBusinessArea asc' +
                '&$expand=ActivityTradingArea' +
                 (filter ? "&$filter=" + filter : "");

            return request;

        };

        //private function
        function init() {
            common.logger.log("service loaded", null, serviceId);
        };

        //init function to load data context
        init();
        return {
            // mns activity planner members
            getFiltersTypeChoices: getBusinessAreaData,
            getActivityBookingPartials: getActivityBookingsAll,
            getOngoingActivityPartials: getOngoingActivity,
            getActivityPlannerLastYearItemsPartials: getLastYearActivity,
            getHostWebUrl: getHostWebUrl
        };
    }
})();
(function () {
    'use strict';

    var serviceId = 'spContext';
    var loggerSource = '[' + serviceId + '] ';
    angular.module('MnS.ActivityPlanner').service(serviceId, [
      '$q', 'common', 'DSCacheFactory', spContext]);

    function spContext($q, common, dsCacheFactory) {

        bindEvents();

        self.activityAppConfig = dsCacheFactory.get("activityAppConfigCache");

        self.activityAppConfig.setOptions({
            onExpire: function (key, value) {
                createSpAppContext()
                    .then(function () {
                        common.logger.log("user token was automatically refreshed.", {}, serviceId);
                    }, function () {
                        common.logger.log("Error getting user token. Putting expired item back in the cache.", {}, serviceId);
                        self.activityAppConfig.put(key, value);
                    });
            }
        });

        var adalConfig = {
            authority: 'https://activity-login.windows.net/kmpdev.onmicrosoft.com',
            resourceUrl: 'https://kmpdev.sharepoint.com/',
            appId: '4773b87f-3701-487c-b0cb-93ff4ac893c4',
            redirectUrl: 'http://localhost:4400/services/aad/redirectTarget.html',
            tenantName: 'development'
        }

        var loginContext = {
            authenticationContext: null,
            authContext: null,
            authResult: null,
            accessToken: null
        };

        var hostWeb = {
            url: adalConfig.resourceUrl + "sites/pinterest/"
        };

        function bindEvents() {
            document.addEventListener('deviceready', createAuthContext, false);
        };

        function createAuthContext() {
            loginContext.authenticationContext = Microsoft.ADAL.AuthenticationContext;
        };

        function createContext() {
            var deferred = $q.defer();
            loginContext.authenticationContext = Microsoft.ADAL.AuthenticationContext;

            loginContext.authenticationContext.createAsync(adalConfig.authority)
              .then(function (context) {
                  loginContext.authContext = context;
                  common.logger.log('Created context successfully: ', context, serviceId);
                  deferred.resolve(context);
              }, function (error) {
                  common.logger.error('Error in creating context successfully: ', error, serviceId);
                  deferred.reject(error);
              });
            return deferred.promise;
        };

        function acquireToken() {
            var deferred = $q.defer();
            createContext().then(function (authContext) {
                loginContext.authContext.acquireTokenAsync(adalConfig.resourceUrl, adalConfig.appId, adalConfig.redirectUrl)
              .then(function (authResult) {
                  loginContext.authResult = authResult;
                  loginContext.accessToken = context.accessToken;
                  deferred.resolve(authResult);
              }, function (error) {
                  deferred.reject(error);
              });

            }, function (error) {
                deferred.reject(error);
            });



            return deferred.promise;
        };

        function stubAcquireToken(deferred) {
            var testUserId;
            loginContext.authContext.tokenCache.readItems().then(function (cacheItems) {
                if (cacheItems.length > 1) {
                    testUserId = cacheItems[0].userInfo.userId;
                }

                loginContext.authContext.acquireTokenSilentAsync(adalConfig.resourceUrl, adalConfig.appId, testUserId).then(function (authResult) {
                    common.logger.log('Acquired token successfully: ', authResult, serviceId);
                    loginContext.authResult = authResult;
                    loginContext.accessToken = context.accessToken;
                    deferred.resolve(authResult);
                }, function (error) {
                    common.logger.error('Failed to acquire token silently: ', error, serviceId);
                    deferred.reject('Failed to acquire token silently');
                });
            }, function (error) {
                acquireToken().then(
                    function (authResult) {
                        deferred.resolve(error);
                    }, function (error) {
                    deferred.reject(error);
                })
                deferred.reject(error);
            });
        };

        function acquireTokenSilent() {

            var deferred = $q.defer();
            createContext().then(
                function (context) {
                    stubAcquireToken(deferred);
                },
                function (error) {
                    deferred.reject(error);
                });

            return deferred.promise;
        };


        function readTokenCache() {
            var deferred = $q.defer();
            if (loginContext.authContext == null) {
                common.logger.log('Authentication context isn\'t created yet. going to create context', {}, serviceId);
                createContext();
            }

            loginContext.authContext.tokenCache.readItems()
              .then(function (res) {
                  common.logger.log('Read token cache successfully. There is ' + res.length + ' items stored.', res, serviceId);
                  loginContext.authContext = res;
                  deferred.resolve(res);
              }, function (error) {
                  common.logger.error('Failed to read token cache: ', error, serviceId);
                  deferred.reject(error);
              });

            return deferred.promise;
        };

        function clearTokenCache() {
            var deferred = $q.defer();
            if (loginContext.authContext == null) {
                common.logger.log('Authentication context isn\'t created yet. going to create context', {}, serviceId);
                createContext();
            }

            loginContext.authContext.tokenCache.clear().then(function () {
                common.logger.log('Cache cleaned up successfully.', {}, serviceId);
                deferred.resolve('Cache cleaned up successfully.');

            }, function (error) {
                common.logger.error('Cache cleaned up successfully.', error, serviceId);
                deferred.reject('Failed to clear token cache: ');

            });

            return deferred.promise;
        }

        function createSpAppContext() {
            var deferred = $q.defer();

            var cacheKey = "loginContextData",
              appLoginData = self.activityAppConfig.get(cacheKey);
            if (appLoginData && appLoginData.expireOn && new Date(appLoginData.expireOn) > new Date()) {
                common.logger.log("Found App config data inside cache", appConfigData, serviceId);
                loginContext.authContext = appLoginData;
                loginContext.accessToken = appLoginData.accessToken;
                deferred.resolve(appLoginData);
            }
            else {
                common.logger.log(loggerSource, 'createing spcontext for app to authenticate and authorize', null);
                var $getTokenSilent = acquireTokenSilent();
                $getTokenSilent.then(
                    function (authResult) {
                        loginContext.accessToken = authResult.accessToken;
                        loginContext.authResult = authResult;
                        self.activityAppConfig.put(cacheKey, authResult);
                        deferred.resolve(authResult);
                    },
                    function (error) {
                        common.logger.error('Failed to acquire token silently. calling acquireToken.', error, serviceId);
                        var $acquireToken = acquireToken();
                        $acquireToken.then(
                            function (authResult) {
                                common.logger.log('Acquired token successfully: ', authResult, serviceId);
                                loginContext.accessToken = authResult.accessToken;
                                loginContext.authResult = authResult;
                                self.activityAppConfig.put(cacheKey, authResult);
                                deferred.resolve(authResult);
                            },
                            function (error) {
                                common.logger.error('Error in acquired token: ', error, serviceId);
                                deferred.reject(error);
                            });
                    });
            }
            return deferred.promise;
        }

        return {
            loginContext: loginContext,
            login: createSpAppContext,
            adalContext: adalConfig,
            hostWeb: hostWeb
        }
    }
})();


(function () {
    'use strict';

    // define controller
    var controllerId = "activityLastYear";
    angular.module('MnS.ActivityPlanner').controller(controllerId,
      ['$location', 'common', 'datacontext', 'commonConfig', activityLastYear]);

    // create controller
    function activityLastYear($location, common, datacontext,commonConfig) {
        var vm = this;
        vm.siteHost = "";
        // navigate to the specified item
         vm.noData = false;

        function getActivityPlannerLastYearItems() {
            var filters = $location.search();
            datacontext.getActivityPlannerLastYearItemsPartials(filters)
                .then(function(data) {
                    if (data && data.length > 0) {
                            vm.noData = false;
                            vm.activityItems = data;
                            vm.activityGroupBy = groupStartDate(vm.activityItems);
                            
                        } else {
                            vm.noData = true;
                    }
                    showHideBusyDialog(false);
                    },
                    function (error) {
                        vm.noData = true;
                        common.logger.log("Error/No Data", error, controllerId);
                        showHideBusyDialog(false);
                    });
        };

        function showHideBusyDialog(show) {
            common.$broadcast(commonConfig.config.workingOnItToggleEvent, { show: show });
        };

        vm.dateFilter = function (val) {
            return function (item) {
                var currentDate = new Date(val);
                var itemDate = new Date(item["ActivityStartDate"]);
                //var startofWeek = getStartOfWeek(item["ActivityStartDate"]);
                var endOfWeek = new Date(currentDate);
                var numberOfDaysToAdd = 7;
                endOfWeek.setDate(endOfWeek.getDate() + numberOfDaysToAdd);

                if (itemDate < endOfWeek && itemDate >= currentDate) {
                    return true;
                } else {
                    return false;
                }
            }
        }

        function getStartOfWeek(d) {
            d = new Date(d);
            var day = d.getDay(),
                diff = d.getDate() - day;
            return new Date(d.setDate(diff));
        };

        function findParentDiv(target) {

            while (target.attributes["data-apitem-id"] === undefined) {
                target = (target.parentElement);
            }
            return target.attributes["data-apitem-id"].value;
        }

        function showDetails($event) {
            if ($event.target.attributes["data-item-attachment"] === undefined) {
                var gId = findParentDiv($event.target);
                var showHideSpan = $("#spanShowHide" + gId);
                var currentClass = showHideSpan.attr('class');
                if (currentClass.indexOf("ion-arrow-down-b") > -1) {
                    $('.ion-arrow-up-b').attr('class', 'ion-arrow-down-b');
                    $("div").find('[data-ap-description]').hide("slow");
                    $("div").find('[data-ap-attachment]').hide("slow");
                    $("#apDescriptionDiv" + gId).show("slow");
                    $("#apAttachmentDiv" + gId).show("slow");
                    showHideSpan.attr('class', 'ion-arrow-up-b');
                } else {
                    showHideSpan.attr('class', 'ion-arrow-down-b');
                    $("#apDescriptionDiv" + gId).hide("slow");
                    $("#apAttachmentDiv" + gId).hide("slow");
                }
            }
        };

        function groupStartDate(items) {
            var propertyName = "ActivityStartDate", isDateFormat = true, titleDateFormat = "DD MMMM";
            var result = [];
            var dummyArray = [];
            $.each(items, function (index, item) {
                var itemDate = getStartOfWeek(new Date(item[propertyName]));
                if ($.inArray(itemDate.toDateString(), dummyArray) === -1) {
                    if (isDateFormat) {
                        var temp = {};
                        temp.original_date = itemDate;
                        temp.main_title_date = moment(temp.original_date).format(titleDateFormat);

                        dummyArray.push(temp.original_date.toDateString());
                        result.push(temp);
                    } else {
                        result.push(item[propertyName]);
                    }
                }
            });
            return result;
        };
        // init controller
        init();
        vm.showDetails = showDetails;

        // init controller
        function init() {
            common.logger.log("controller loaded", null, controllerId);
            getHostName();
            getActivityPlannerLastYearItems();
            common.activateController([], controllerId);
        };

        // navigate to the specified item
        function getHostName() {
            vm.siteHost = datacontext.getHostWebUrl();
        };

    };

})();
(function () {
    'use strict';

    // define controller
    var controllerId = 'login';
    angular.module('MnS.ActivityPlanner').controller(controllerId,
      ['$q', '$window', '$location', 'common', 'commonConfig', 'spContext', loginController]);

    // init controller
    function loginController($q,$window, $location, common, commonConfig, spContext) {
        var vm = this;
        vm.errorMessage = "";
        init();

        function showHideBusyDialog(show) {
            common.$broadcast(commonConfig.config.workingOnItToggleEvent, { show: show });
        };

        // init controller
        function init() {
            
            //bootstrap activity app
            common.logger.log("controller loaded", null, controllerId);
            common.activateController([], controllerId);          
        }

        vm.login = function () {
            showHideBusyDialog(true);
            var deferred = spContext.login();
            deferred.then(function (authResult) {
                common.logger.log("User logged in", authResult, controllerId);
                showHideBusyDialog(false);
                $location.path('new');
            },
                function (error) {
                    common.logger.log("User logged in error", error, controllerId);
                    var d = confirm("An Error occured. Do you want to retry?\n" + JSON.stringify(error));
                    if (d) {
                        showHideBusyDialog(false);
                        init();
                    } else {
                        vm.errorMessage = JSON.stringify(error);
                        showHideBusyDialog(false);
                    }
                });
        }
    }
})();
(function () {
    'use strict';

    // define controller
    var controllerId = "activityNew";
    angular.module('MnS.ActivityPlanner').controller(controllerId,
      ['$location', 'common', 'datacontext', 'commonConfig', activityNew]);

    // create controller
    function activityNew($location, common, datacontext, commonConfig) {
        var vm = this;
        vm.siteHost = "";
        vm.noData = false;
        vm.isItemExpired = isItemExpired;

        function isItemExpired(input) {
            var activityEndDate = (Date.parse(input));
            var today = (new Date());
            var result = parseInt((activityEndDate - today) / (24 * 3600 * 1000));
            if (result < 0 ) {
                return true;
            } else {
                return false;
            }
        };

        function getActivityPlannerItems() {

            var filters = $location.search();
            datacontext.getActivityBookingPartials(filters)
                .then(function (data) {
                        vm.noData = false;
                        if (data && data.length > 0) {
                            vm.activityItems = data;
                            vm.activityGroupBy = groupStartDate(vm.activityItems);
                            
                        } else {
                            vm.noData = true;
                        }

                        showHideBusyDialog(false);
                    },
                    function (error) {
                        common.logger.log("Error/No Data", error, controllerId);
                        vm.noData = true;
                        showHideBusyDialog(false);
                    });
        };

        function showHideBusyDialog(show) {
            common.$broadcast(commonConfig.config.workingOnItToggleEvent, { show: show });
        };

        vm.dateFilter = function (val) {
            return function (item) {
                var currentDate = new Date(val);
                var itemDate = new Date(item["ActivityStartDate"]);
                //var startofWeek = getStartOfWeek(item["ActivityStartDate"]);
                var endOfWeek = new Date(currentDate);
                var numberOfDaysToAdd = 7;
                endOfWeek.setDate(endOfWeek.getDate() + numberOfDaysToAdd);

                if (itemDate < endOfWeek && itemDate >= currentDate) {
                    return true;
                } else {
                    return false;
                }
            }
        }

        function getStartOfWeek(d) {
            d = new Date(d);
            var day = d.getDay(),
                diff = d.getDate() - day;
            return new Date(d.setDate(diff));
        };

        function findParentDiv(target) {

            while (target.attributes["data-apitem-id"] === undefined) {
                target = (target.parentElement);
            }
            return target.attributes["data-apitem-id"].value;
        }

        function showDetails($event) {
            if ($event.target.attributes["data-item-attachment"] === undefined) {
                var gId = findParentDiv($event.target);
                var showHideSpan = $("#spanShowHide" + gId);
                var currentClass = showHideSpan.attr('class');
                if (currentClass.indexOf("ion-arrow-down-b") > -1) {
                    $('.ion-arrow-up-b').attr('class', 'ion-arrow-down-b');
                    $("div").find('[data-ap-description]').hide("slow");
                    $("div").find('[data-ap-attachment]').hide("slow");
                    $("#apDescriptionDiv" + gId).show("slow");
                    $("#apAttachmentDiv" + gId).show("slow");
                    showHideSpan.attr('class', 'ion-arrow-up-b');
                } else {
                    showHideSpan.attr('class', 'ion-arrow-down-b');
                    $("#apDescriptionDiv" + gId).hide("slow");
                    $("#apAttachmentDiv" + gId).hide("slow");
                }
            }
        };

        function groupStartDate(items) {
            var propertyName = "ActivityStartDate", isDateFormat = true, titleDateFormat = "DD MMMM";
            var result = [];
            var dummyArray = [];
            $.each(items, function (index, item) {
                var itemDate = getStartOfWeek(new Date(item[propertyName]));
                if ($.inArray(itemDate.toDateString(), dummyArray) === -1) {
                    if (isDateFormat) {
                        var temp = {};
                        temp.original_date = itemDate;
                        temp.main_title_date = moment(temp.original_date).format(titleDateFormat);

                        dummyArray.push(temp.original_date.toDateString());
                        result.push(temp);
                    } else {
                        result.push(item[propertyName]);
                    }
                }
            });
            return result;
        };

        // init controller
        init();
      
        vm.showDetails = showDetails;

        // init controller
        function init() {
            common.logger.log("controller loaded", null, controllerId);
            getHostName();
            getActivityPlannerItems();
            common.activateController([], controllerId);
        };

        // navigate to the specified item
        function getHostName() {
            vm.siteHost = datacontext.getHostWebUrl();
        };

    };

    // sample data
})();
(function () {
    'use strict';

    // define controller
    var controllerId = "activityOngoing";
    angular.module('MnS.ActivityPlanner').controller(controllerId,
      ['$location', 'common', 'datacontext', 'commonConfig', activityOngoing]);

    // create controller
    function activityOngoing($location, common, datacontext, commonConfig) {
        var vm = this;
        vm.siteHost = "";
        // navigate to the specified item
       
        vm.noData = false;

        function getActivityPlannerOnGoingItems() {
            var filters = $location.search();
            datacontext.getOngoingActivityPartials(filters)
                .then(function(data) {
                    if (data && data.length > 0) {
                            vm.noData = false;
                            vm.activityItems = data;
                            vm.activityGroupBy = groupStartDate(vm.activityItems);
                        } else {
                            vm.noData = true;
                        }
                        showHideBusyDialog(false);
                    },
                    function (error) {
                        vm.noData = true;
                        common.logger.log("Error/No Data", error, controllerId);
                        showHideBusyDialog(false);
                    });
        };

        function showHideBusyDialog(show) {
            common.$broadcast(commonConfig.config.workingOnItToggleEvent, { show: show });
        };
        vm.dateFilter = function(val) {
            return function(item) {
                var currentDate = new Date(val);
                var itemDate = new Date(item["ActivityStartDate"]);
                //var startofWeek = getStartOfWeek(item["ActivityStartDate"]);
                var endOfWeek = new Date(currentDate);
                var numberOfDaysToAdd = 7;
                endOfWeek.setDate(endOfWeek.getDate() + numberOfDaysToAdd);

                if (itemDate < endOfWeek && itemDate >= currentDate) {
                    return true;
                } else {
                    return false;
                }
            }
        };

        function getStartOfWeek(d) {
            d = new Date(d);
            var day = d.getDay(),
                diff = d.getDate() - day;
            return new Date(d.setDate(diff));
        };

        function findParentDiv(target) {

            while (target.attributes["data-apitem-id"] === undefined) {
                target = (target.parentElement);
            }
            return target.attributes["data-apitem-id"].value;
        }

        function showDetails($event) {
            if ($event.target.attributes["data-item-attachment"] === undefined) {
                var gId = findParentDiv($event.target);
                var showHideSpan = $("#spanShowHide" + gId);
                var currentClass = showHideSpan.attr('class');
                if (currentClass.indexOf("ion-arrow-down-b") > -1) {
                    $('.ion-arrow-up-b').attr('class', 'ion-arrow-down-b');
                    $("div").find('[data-ap-description]').hide("slow");
                    $("div").find('[data-ap-attachment]').hide("slow");
                    $("#apDescriptionDiv" + gId).show("slow");
                    $("#apAttachmentDiv" + gId).show("slow");
                    showHideSpan.attr('class', 'ion-arrow-up-b');
                } else {
                    showHideSpan.attr('class', 'ion-arrow-down-b');
                    $("#apDescriptionDiv" + gId).hide("slow");
                    $("#apAttachmentDiv" + gId).hide("slow");
                }
            }
        };

        function groupStartDate(items) {
            var propertyName = "ActivityStartDate", isDateFormat = true, titleDateFormat = "DD MMMM";
            var result = [];
            var dummyArray = [];
            $.each(items, function (index, item) {
                var itemDate = getStartOfWeek(new Date(item[propertyName]));
                if ($.inArray(itemDate.toDateString(), dummyArray) === -1) {
                    if (isDateFormat) {
                        var temp = {};
                        temp.original_date = itemDate;
                        temp.main_title_date = moment(temp.original_date).format(titleDateFormat);

                        dummyArray.push(temp.original_date.toDateString());
                        result.push(temp);
                    } else {
                        result.push(item[propertyName]);
                    }
                }
            });
            return result;
        };

        // init controller
        init();
        vm.showDetails = showDetails;

        // init controller
        function init() {
            common.logger.log("controller loaded", null, controllerId);
            getHostName();
            getActivityPlannerOnGoingItems();
            common.activateController([], controllerId);
        };

        // navigate to the specified item
        function getHostName() {
            vm.siteHost = datacontext.getHostWebUrl();
        };

    };

})();